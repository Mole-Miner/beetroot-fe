import gulp from 'gulp';
import htmlMinify from 'html-minifier';
import * as dartSass from 'sass';
import gulpSass from 'gulp-sass';
import cleanCSS from 'gulp-clean-css';
import rename from 'gulp-rename';
import babel from 'gulp-babel';
import uglify from 'gulp-uglify';
import concat from 'gulp-concat';
import imagemin from 'gulp-imagemin';
import * as del from 'del';
import browserSync from 'browser-sync';

const sass = gulpSass(dartSass);
const bs = browserSync.create();
const htmlMinifyOptions = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
};

const paths = {
    pages: {
        src: 'src/index.html',
        dest: 'dist',
    },
    scripts: {
        src: 'src/scripts/**/*.js',
        dest: 'dist/scripts',
    },
    styles: {
        src: 'src/scss/**/*.scss',
        dest: 'dist/css',
    },
    images: {
        src: 'src/images/**/*.{jpg,jpeg,png}',
        dest: 'dist/images',
    },
    fonts: {
        src: 'src/fonts/**/*',
        dest: 'dist/fonts',
    }
};

export function clean() {
    return del.deleteAsync('dist');
}

export function pages() {
    return gulp.src(paths.pages.src)
        .on('data', (file) => {
            file.contents = Buffer.from(htmlMinify.minify(file.contents.toString(), htmlMinifyOptions));
            return file;
        })
        .pipe(gulp.dest(paths.pages.dest));
}

export function scripts() {
    return gulp.src(paths.scripts.src)
        .pipe(babel())
        .pipe(uglify())
        .pipe(concat('main.js'))
        .pipe(rename({
            basename: 'main',
            suffix: '.min',
        }))
        .pipe(gulp.dest(paths.scripts.dest))
        .pipe(bs.stream());
}

export function styles() {
    return gulp.src(paths.styles.src)
        .pipe(sass().on('error', sass.logError))
        .pipe(cleanCSS())
        .pipe(rename({
            suffix: '.min',
        }))
        .pipe(gulp.dest(paths.styles.dest))
        .pipe(bs.stream());
}

export function images() {
    return gulp.src(paths.images.src, {since: gulp.lastRun(images)})
        .pipe(imagemin({optimizationLevel: 5}))
        .pipe(gulp.dest(paths.images.dest));
}

export function fonts() {
    return gulp.src(paths.fonts.src)
        .pipe(gulp.dest(paths.fonts.dest));
}

function watchFiles() {
    gulp.watch(paths.pages.src, pages);
    gulp.watch(paths.scripts.src, scripts);
    gulp.watch(paths.styles.src, styles);
    gulp.watch(paths.images.src, images);
    gulp.watch(paths.fonts.src, fonts);
}
export {watchFiles as watch};

export function serve() {
    build();
    bs.init({
        server: 'dist',
        notify: false,
        minify: true,
        open: false,
    });
    watchFiles();
    gulp.watch(paths.pages.src).on('change', bs.reload);
}

const build = gulp.series(clean, gulp.parallel(pages, scripts, styles, images, fonts));

export default build;
